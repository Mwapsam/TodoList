(()=>{"use strict";var n={426:(n,t,e)=>{e.d(t,{Z:()=>r});var a=e(537),s=e.n(a),o=e(645),i=e.n(o)()(s());i.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto&display=swap);"]),i.push([n.id,"body {\n  background-color: #f6f6f6;\n  font-family: 'Roboto', sans-serif;\n  box-sizing: border-box;\n  margin: 0;\n  color: #645f5f;\n}\n\nsection {\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.todo {\n  box-shadow: 3px 2px 4px gray;\n}\n\n.todo > div,\n.task {\n  min-width: 400px;\n  max-width: 550px;\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 1px solid #dcdbdb;\n}\n\n.todo .header {\n  background-color: white;\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n}\n\n.todo .header h1 {\n  margin: 0;\n  font-size: 16px;\n  font-weight: 400;\n}\n\n.todo .tasks,\n.todo .add_task {\n  background-color: white;\n}\n\n.todo .add_task,\n.task {\n  padding: 20px;\n}\n\n.task {\n  display: flex;\n  justify-content: space-between;\n}\n\n.todo .tasks {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}\n\ninput,\ninput:focus,\ntextarea:focus,\nselect:focus {\n  border: 0;\n  outline: 0;\n  font-size: 14px;\n  color: cadetblue;\n  line-height: 28px;\n  margin-right: 10px;\n}\n\n.tasks input {\n  color: black;\n}\n\ninput::placeholder {\n  font-style: italic;\n}\n\n.todo .footer {\n  text-align: center;\n  color: grey;\n  display: flex;\n  justify-content: center;\n  padding: 20px;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;EACE,yBAAyB;EACzB,iCAAiC;EACjC,sBAAsB;EACtB,SAAS;EACT,cAAc;AAChB;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;;EAEE,gBAAgB;EAChB,gBAAgB;EAChB,aAAa;EACb,8BAA8B;EAC9B,gCAAgC;AAClC;;AAEA;EACE,uBAAuB;EACvB,aAAa;EACb,aAAa;EACb,8BAA8B;AAChC;;AAEA;EACE,SAAS;EACT,eAAe;EACf,gBAAgB;AAClB;;AAEA;;EAEE,uBAAuB;AACzB;;AAEA;;EAEE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,8BAA8B;AAChC;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;AACzB;;AAEA;;;;EAIE,SAAS;EACT,UAAU;EACV,eAAe;EACf,gBAAgB;EAChB,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,aAAa;EACb,uBAAuB;EACvB,aAAa;AACf",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');\n\nbody {\n  background-color: #f6f6f6;\n  font-family: 'Roboto', sans-serif;\n  box-sizing: border-box;\n  margin: 0;\n  color: #645f5f;\n}\n\nsection {\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.todo {\n  box-shadow: 3px 2px 4px gray;\n}\n\n.todo > div,\n.task {\n  min-width: 400px;\n  max-width: 550px;\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 1px solid #dcdbdb;\n}\n\n.todo .header {\n  background-color: white;\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n}\n\n.todo .header h1 {\n  margin: 0;\n  font-size: 16px;\n  font-weight: 400;\n}\n\n.todo .tasks,\n.todo .add_task {\n  background-color: white;\n}\n\n.todo .add_task,\n.task {\n  padding: 20px;\n}\n\n.task {\n  display: flex;\n  justify-content: space-between;\n}\n\n.todo .tasks {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}\n\ninput,\ninput:focus,\ntextarea:focus,\nselect:focus {\n  border: 0;\n  outline: 0;\n  font-size: 14px;\n  color: cadetblue;\n  line-height: 28px;\n  margin-right: 10px;\n}\n\n.tasks input {\n  color: black;\n}\n\ninput::placeholder {\n  font-style: italic;\n}\n\n.todo .footer {\n  text-align: center;\n  color: grey;\n  display: flex;\n  justify-content: center;\n  padding: 20px;\n}\n"],sourceRoot:""}]);const r=i},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",a=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),a&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),a&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,a,s,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(a)for(var r=0;r<this.length;r++){var c=this[r][0];null!=c&&(i[c]=!0)}for(var d=0;d<n.length;d++){var A=[].concat(n[d]);a&&i[A[0]]||(void 0!==o&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=o),e&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=e):A[2]=e),s&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=s):A[4]="".concat(s)),t.push(A))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),o="/*# ".concat(s," */"),i=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(i).concat([o]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,a=0;a<t.length;a++)if(t[a].identifier===n){e=a;break}return e}function a(n,a){for(var o={},i=[],r=0;r<n.length;r++){var c=n[r],d=a.base?c[0]+a.base:c[0],A=o[d]||0,l="".concat(d," ").concat(A);o[d]=A+1;var p=e(l),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)t[p].references++,t[p].updater(u);else{var f=s(u,a);a.byIndex=r,t.splice(r,0,{identifier:l,updater:f,references:1})}i.push(l)}return i}function s(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,s){var o=a(n=n||[],s=s||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var r=e(o[i]);t[r].references--}for(var c=a(n,s),d=0;d<o.length;d++){var A=e(o[d]);0===t[A].references&&(t[A].updater(),t.splice(A,1))}o=c}}},569:n=>{var t={};n.exports=function(n,e){var a=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var a="";e.supports&&(a+="@supports (".concat(e.supports,") {")),e.media&&(a+="@media ".concat(e.media," {"));var s=void 0!==e.layer;s&&(a+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),a+=e.css,s&&(a+="}"),e.media&&(a+="}"),e.supports&&(a+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(a,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(a){var s=t[a];if(void 0!==s)return s.exports;var o=t[a]={id:a,exports:{}};return n[a](o,o.exports,e),o.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var a in t)e.o(t,a)&&!e.o(n,a)&&Object.defineProperty(n,a,{enumerable:!0,get:t[a]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n=e(379),t=e.n(n),a=e(795),s=e.n(a),o=e(569),i=e.n(o),r=e(565),c=e.n(r),d=e(216),A=e.n(d),l=e(589),p=e.n(l),u=e(426),f={};f.styleTagTransform=p(),f.setAttributes=c(),f.insert=i().bind(null,"head"),f.domAPI=s(),f.insertStyleElement=A(),t()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;class h{constructor(n,t,e){this.index=n,this.description=t,this.completed=e}}class E{static save=n=>{localStorage.setItem("tasks",JSON.stringify(n))}}class x{static reset=n=>{n.innerHTML=""};static displayTask=(n,t)=>{const e=x.createHtml(n,"div","task"),a=x.createHtml(e,"div","task_input"),s=x.createHtml(a,"input");s.setAttribute("type","checkbox"),s.setAttribute("class",`task_${t.index}_checkbox`);const o=x.createHtml(a,"input");o.setAttribute("type","text"),o.setAttribute("class",`task_${t.index} input_task`),o.dataset.id=t.index,o.value=t.description,o.id=`input_task_${t.index}`;const i=x.createHtml(e,"i","fas fa-ellipsis-v");i.setAttribute("class","fas fa-trash"),i.id=`task_${t.index}`,i.dataset.id=t.index};static createHtml=(n,t,e,a=null)=>{const s=document.createElement(t);return s.className=e,s.innerHTML=a,n.appendChild(s),s}}const k=n=>document.querySelector(n),y=n=>document.querySelectorAll(n),m=k("input"),b=new class{constructor(){this.tasks=[]}getTasks=()=>this.tasks.sort(((n,t)=>n.index-t.index));addTask=(n,t=!1)=>{const e=new h(this.tasks.length+1,n,t);return this.tasks.push(e),E.save(this.tasks),e};deleteTask=n=>{const t=[],e=n-1;this.tasks.forEach(((n,a)=>{a<e?t.push(n):a>e&&(n.index=a,t.push(n))})),this.tasks=t,E.save(this.tasks)};updateTask=(n,t,e)=>(this.tasks[n-1].description=t,this.tasks[n-1].completed=e,E.save(this.tasks),this.tasks[n-1])},g=(n,t)=>{"Enter"===n.key&&b.updateTask(t,k(`.task_${t}`).value,k(`.task_${t}_checkbox`).checked)},v=n=>{b.deleteTask(n),x.reset(k(".tasks")),b.getTasks().forEach((n=>x.displayTask(k(".tasks"),n))),y(".fa-trash").forEach((n=>n.addEventListener("click",(()=>{v(n.dataset.id)})))),y(".input_task").forEach((n=>n.addEventListener("keyup",(t=>{g(t,n.dataset.id)}))))};m.addEventListener("keyup",(({key:n})=>{if("Enter"===n){const n=b.addTask(m.value);x.displayTask(k(".tasks"),n),k(`#task_${n.index}`).addEventListener("click",(()=>{v(n.index)})),k(`#input_task_${n.index}`).addEventListener("keyup",(t=>{g(t,n.index)}))}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,